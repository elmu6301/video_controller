
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module em_project_final(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

logic clk; //System Clock 50 MHz
logic ext_reset_n, reset_n; //System reset active low

logic pll_rfr_locked, pll_rfr_outclk; //PLL_RFR wires
logic pll_sdram_locked, pll_sdram_outclk, pll_sdram_outclk_ps; //PLL_SDRAM wires

logic fifo_0_out_valid; 
logic [31:0] fifo_0_out_data; 
logic [7:0]  fifo_0_out_channel, fifo_0_out_error;
logic fifo_0_out_startofpacket, fifo_0_out_endofpacket, fifo_0_out_empty, fifo_0_out_ready; 

//VTC output lines
logic h_sync; 
logic [11:0] pixel_count; 
logic v_sync; 
logic [11:0] line_count; 
logic video_on; 

//Pixel Generator output lines
logic [7:0] red, green, blue; 
logic [3:0] bar_cnt; 


//=======================================================
//  REG/WIRE assignments
//=======================================================
assign clk = CLOCK_50; 
assign reset_n = KEY[0]; 

assign DRAM_CLK = pll_sdram_outclk_ps; 

//VGA assignments
assign VGA_BLANK_N = 1'b1; 
assign VGA_SYNC_N = 1'b0; 
assign VGA_CLK = pll_rfr_outclk;  
assign VGA_HS = h_sync; 
assign VGA_VS = v_sync; 

assign VGA_R = red; 
assign VGA_G = green; 
assign VGA_B = blue;

//=======================================================
//  Module declarations
//=======================================================



//Video Controller Module
vtc VGA_VTC(.rfr_clk(pll_rfr_outclk),
			.reset_n(reset_n),
			.h_sync(h_sync),
			.h_count(pixel_count),
			.v_sync(v_sync),
			.v_count(line_count),
			.video_on(video_on)
			); 

//Pixel Generator Module
pixel_gen PIXEL_GEN(.rfr_clk(pll_rfr_outclk),
					.reset_n(reset_n),
					.video_on(video_on), 
					.pixel_cnt(pixel_count),
					.line_cnt(line_count),
					.h_sync(h_sync),
					.v_sync(v_sync), 
					
					.p_red(red),
					.p_green(green),
					.p_blue(blue)
					); 

em_project_final_pd PD( //Inputs
						.clk_clk(clk),               							//      clk.clk
						.reset_reset_n(reset_n),                 				//      reset.reset_n
						
						//PIO outputs
						.pio_0_external_connection_export(LEDR), 				// 		pio_0_external_connection.export
						
						//PLL_RFR outputs (74.25 MHz)
						.pll_rfr_locked_export(pll_rfr_locked),           		//      pll_rfr_locked.export
						.pll_rfr_outclk_clk(pll_rfr_outclk),              		//      pll_rfr_outclk.clk
						
						//PLL_SDRAM outputs (143 MHz)
						.pll_sdram_locked_export(pll_sdram_locked),           	//      pll_0_locked.export
						.pll_sdram_outclk_clk(pll_sdram_outclk),              	//      pll_0_outclk.clk
						.pll_sdram_outclk_ps_clk(pll_sdram_outclk_ps),  			//      pll_0_outclk_shift.clk

						//SDRAM outputs
						.sdram_controller_0_wire_addr(DRAM_ADDR),   			// 		sdram_controller_0_wire.addr
						.sdram_controller_0_wire_ba(DRAM_BA),    				//      .ba
						.sdram_controller_0_wire_cas_n(DRAM_CAS_N), 			//      .cas_n
						.sdram_controller_0_wire_cke(DRAM_CKE),   				//      .cke
						.sdram_controller_0_wire_cs_n(DRAM_CS_N),  				//      .cs_n
						.sdram_controller_0_wire_dq(DRAM_DQ),    				//      .dq
						.sdram_controller_0_wire_dqm({DRAM_UDQM, DRAM_LDQM}),	//      .dqm
						.sdram_controller_0_wire_ras_n(DRAM_RAS_N), 			//      .ras_n
						.sdram_controller_0_wire_we_n (DRAM_WE_N),  			//      .we_n

						//FIFO outputs
						.fifo_0_out_valid(fifo_0_out_valid),                 	//      fifo_0_out.valid
						.fifo_0_out_data(fifo_0_out_data),                  	//      .data
						.fifo_0_out_channel(fifo_0_out_channel),             	//      .channel
						.fifo_0_out_error(fifo_0_out_error),                 	//      .error
						.fifo_0_out_startofpacket(fifo_0_out_startofpacke),  	//      .startofpacket
						.fifo_0_out_endofpacket(fifo_0_out_endofpacket),     	//      .endofpacket
						.fifo_0_out_empty(fifo_0_out_empty),                 	//     	.empty
						.fifo_0_out_ready(fifo_0_out_ready),                    //     	.ready
						
						); 

	

endmodule
